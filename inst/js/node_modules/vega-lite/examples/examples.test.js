"use strict";
var chai_1 = require('chai');
var vl = require('../src/vl');
var util_1 = require('../test/util');
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var validator = new util_1.zSchema({
    noEmptyArrays: true,
    noEmptyStrings: true
});
var vlSchema = require('../vega-lite-schema.json');
var vgSchema = require('../node_modules/vega/vega-schema.json');
function validateAgainstSchemas(vlspec) {
    var isVlValid = validator.validate(vlspec, vlSchema);
    if (!isVlValid) {
        var errors = validator.getLastErrors();
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(isVlValid);
    var vegaSpec = vl.compile(vlspec);
    var isVgValid = validator.validate(vegaSpec, vgSchema);
    if (!isVgValid) {
        var errors = validator.getLastErrors();
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(isVgValid);
}
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        it('should be valid and produce valid vega for: ' + example, function () {
            var data = JSON.parse(fs.readFileSync('examples/specs/' + example));
            validateAgainstSchemas(data);
        });
    });
});
//# sourceMappingURL=examples.test.js.map