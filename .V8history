global.vegalite
keys(global.vegalite)
global.vegalite.keys()
global.vegalite.keys()
for(var k in global.vegalite) k;
Object.keys(global.vegalite)
quit
Object.keys(global.vegalite.spec)
ct$call("global.vegalite.spec.getCleanSpec", spec)
Object.keys(global.vegalite.spec.getCleanSpec)
global.vegalite.spec.getCleanSpec("{}")
cat(spec)
Object.keys(global.vegalite)
Object.keys(global.vegalite.compile)
ct$eval("function parseModel(spec) { return new global.vegalite.compile.Model(spec); }")
Object.keys(global.vegalite)
Object.keys(global.vegalite.bin)
Object.keys(global.vegalite.channel)
Object.keys(global.vegalite.compile)
Object.keys(global.vegalite.data)
Object.keys(global.vegalite.encoding)
Object.keys(global.vegalite.util)
Object.keys(global.vegalite.spec)
Object.keys(global.vegalite.schema)
Object.keys(global.vegalite.data)
ss <- ct$call("global.vegalite.compile", good_spec)
Object.keys(global.vegalite.schema)
Object.keys(global.vegalite)
Object.keys(global.vegalite.version)
Object.keys(global.vegalite.validate)
Object.keys(global.vegalite.util)
Object.keys(global.vegalite.schema)
Object.keys(global.vegalite.encoding)
Object.keys(global.vegalite.data)
Object.keys(global.vegalite.compile)
Object.values(global.vegalite.compile)
Object.values(global.vegalite)
Object.entries(global.vegalite)
Object.keys(global.vegalite)
Object.keys(global.vegalite.bin)
Object.keys(global.vegalite.channel)
Object.keys(global.vegalite.compile)
Object.keys(global.vegalite.util)
ss <- ct$call("global.vegalite.compile", good_spec)
ss <- ct$call("global.vegalite.compile", good_spec)
Object.keys(global.vegalite.validate)
Object.keys(global.vegalite)
